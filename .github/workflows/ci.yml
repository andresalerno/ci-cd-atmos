name: CI Pipeline (Lint, Test, Build)

on:
  # Gatilho para o CI rodar quando houver push ou pull request para a branch main
  push:
    branches:
      - main  # Executa quando há push para a branch principal (main)
  pull_request:
    branches:
      - main  # Executa quando há pull request para a branch principal (main)
  # Permite disparar manualmente pelo UI do GitHub
  workflow_dispatch:

jobs:
  # Job de Linting para o Backend
  backend-lint:
    runs-on: ubuntu-latest  # Usa a última versão do Ubuntu disponível para execução
    defaults:
      run:
        working-directory: backend  # Define o diretório de trabalho como 'backend'

    steps:
      # Passo 1: Checkout do código
      - uses: actions/checkout@v4
        name: Checkout code

      # Passo 2: Configuração do Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: 18  # Define a versão do Node.js
          cache: 'npm'  # Ativa cache para dependências npm
          cache-dependency-path: backend/package.json  # Usa arquivo existente para chave do cache

      # Passo 3: Instalar dependências
      - name: Install
        run: |
          # Tenta instalação reprodutível (npm ci); se falhar por devDeps novos, faz npm i
          if [ -f package-lock.json ]; then npm ci || npm i --no-audit --no-fund; else npm i --no-audit --no-fund; fi

      # Passo 4: Rodar Lint (verificação de qualidade de código)
      - name: Lint
        run: npm run lint

  # Job de Testes para o Backend
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend  # Define o diretório de trabalho como 'backend'

    steps:
      - uses: actions/checkout@v4
        name: Checkout code

      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: backend/package.json

      - name: Install
        run: |
          if [ -f package-lock.json ]; then npm ci || npm i --no-audit --no-fund; else npm i --no-audit --no-fund; fi

      # Passo 2: Rodar os testes
      - name: Test
        run: npm test

      - name: Upload backend test reports (JUnit)
        uses: actions/upload-artifact@v4
        with:
          name: backend-tests-junit-${{ github.run_number }}
          path: |
            backend/reports/**/*.xml
            backend/test-results/**/*.xml
          if-no-files-found: ignore
          retention-days: 14

      - name: Upload backend coverage
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-${{ github.run_number }}
          path: backend/coverage/**
          if-no-files-found: ignore
          retention-days: 14

  # Job de Build para o Backend
  backend-build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend  # Define o diretório de trabalho como 'backend'

    steps:
      - uses: actions/checkout@v4
        name: Checkout code

      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: backend/package.json

      - name: Install
        run: |
          if [ -f package-lock.json ]; then npm ci || npm i --no-audit --no-fund; else npm i --no-audit --no-fund; fi

      # Passo 3: Build (Noop aqui, pode ser ajustado para um verdadeiro build)
      - name: Build (noop for backend)
        run: echo "no build step"  # No-op: sem build real para o backend, mas pode ser ajustado se necessário

      - name: Package backend artifact
        run: |
          tar -czf backend-artifact-${GITHUB_RUN_NUMBER}.tar.gz \
            package.json package-lock.json Dockerfile src || echo "nothing to package?"

      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifact-${{ github.run_number }}
          path: backend/backend-artifact-${{ github.run_number }}.tar.gz
          if-no-files-found: ignore
          retention-days: 14

  # Job de Linting para o Frontend
  frontend-lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend  # Define o diretório de trabalho como 'frontend'

    steps:
      - uses: actions/checkout@v4
        name: Checkout code

      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: frontend/package.json

      - name: Install
        run: |
          if [ -f package-lock.json ]; then npm ci || npm i --no-audit --no-fund; else npm i --no-audit --no-fund; fi

      # Passo 4: Rodar Lint no frontend
      - name: Lint
        run: npm run lint

  # Job de Testes para o Frontend
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend  # Define o diretório de trabalho como 'frontend'

    steps:
      - uses: actions/checkout@v4
        name: Checkout code

      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: frontend/package.json

      - name: Install
        run: |
          if [ -f package-lock.json ]; then npm ci || npm i --no-audit --no-fund; else npm i --no-audit --no-fund; fi

      # Passo 5: Rodar Testes no frontend
      - name: Test
        run: npm test

      - name: Upload frontend test reports (JUnit)
        uses: actions/upload-artifact@v4
        with:
          name: frontend-tests-junit-${{ github.run_number }}
          path: |
            frontend/reports/**/*.xml
            frontend/test-results/**/*.xml
          if-no-files-found: ignore
          retention-days: 14

      - name: Upload frontend coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-${{ github.run_number }}
          path: frontend/coverage/**
          if-no-files-found: ignore
          retention-days: 14

  # Job de Build para o Frontend
  frontend-build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend  # Define o diretório de trabalho como 'frontend'

    steps:
      - uses: actions/checkout@v4
        name: Checkout code

      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: frontend/package.json

      - name: Install
        run: |
          if [ -f package-lock.json ]; then npm ci || npm i --no-audit --no-fund; else npm i --no-audit --no-fund; fi

      # Passo 6: Build do frontend
      - name: Build
        run: npm run build

      # Publica o build do frontend como artefato do workflow (para download)
      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist-${{ github.run_number }}
          path: frontend/dist
          if-no-files-found: ignore
          retention-days: 14

  # Job de Sumário do Build: mostra status de todos os jobs e metadados do run
  summary:
    needs:
      - backend-lint
      - backend-test
      - backend-build
      - frontend-lint
      - frontend-test
      - frontend-build
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Publicar resumo do build
        run: |
          {
            echo "## Resumo do Build";
            echo "- Run: $GITHUB_RUN_NUMBER";
            echo "- Workflow: $GITHUB_WORKFLOW";
            echo "- Commit: $GITHUB_SHA";
            echo "- Ref: $GITHUB_REF";
            echo "- Ator: $GITHUB_ACTOR";
            echo "- Data (UTC): $(date -u '+%Y-%m-%d %H:%M:%S')";
            echo "";
            echo "### Status dos Jobs";
            echo "- backend-lint: ${{ needs.backend-lint.result }}";
            echo "- backend-test: ${{ needs.backend-test.result }}";
            echo "- backend-build: ${{ needs.backend-build.result }}";
            echo "- frontend-lint: ${{ needs.frontend-lint.result }}";
            echo "- frontend-test: ${{ needs.frontend-test.result }}";
            echo "- frontend-build: ${{ needs.frontend-build.result }}";
          } >> "$GITHUB_STEP_SUMMARY"
