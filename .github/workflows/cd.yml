name: CD Pipeline (Deploy)

on:
  workflow_dispatch:
    inputs:
      apply:
        description: "Apply Terraform and deploy (manual run)"
        type: boolean
        default: false
        required: false
      build_backend_image:
        description: "Build & Push backend image (manual run)"
        type: boolean
        default: false
        required: false
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

permissions:
  contents: read  # Permissões para acessar os conteúdos do repositório

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: atmos  # Definir o environment para acesso aos secrets
    env:
      AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID || '058264220517' }}
      ECR_REPO_BACKEND: ${{ secrets.ECR_REPO_BACKEND || 'devops-study-backend' }}

    steps:
      # Passo 1: Checkout do código
      - uses: actions/checkout@v4
        name: Checkout code

      # Passo 2: Verificação dos secrets
      - name: Check secrets
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPO_BACKEND: ${{ secrets.ECR_REPO_BACKEND }}
        run: |
          missing=0
          if [ -z "${AWS_ACCESS_KEY_ID}" ]; then echo "::error::Missing secret AWS_ACCESS_KEY_ID"; missing=1; fi
          if [ -z "${AWS_SECRET_ACCESS_KEY}" ]; then echo "::error::Missing secret AWS_SECRET_ACCESS_KEY"; missing=1; fi
          if [ -z "${AWS_SESSION_TOKEN}" ]; then echo "::warning::Missing AWS_SESSION_TOKEN (ok for long-lived keys)"; fi
          if [ -z "${AWS_REGION}" ]; then echo "::warning::Missing AWS_REGION; defaulting to us-east-1"; fi
          if [ -z "${AWS_ACCOUNT_ID}" ]; then echo "::warning::Missing AWS_ACCOUNT_ID (required for ECR build/push)"; fi
          if [ -z "${ECR_REPO_BACKEND}" ]; then echo "::warning::Missing ECR_REPO_BACKEND (required for ECR build/push)"; fi
          test "$missing" -eq 0

      # Passo 3: Configurar as credenciais AWS com Access Key ID, Secret Access Key e Session Token
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: true

      # Passo 4: Login no Amazon ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # Passo 5: Garante que o repositório do ECR existe
      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPO_BACKEND" >/dev/null 2>&1 \
            || aws ecr create-repository --repository-name "$ECR_REPO_BACKEND"

      # Passo 6: Build & Push Backend para o ECR
      - name: Build & Push Backend to ECR
        run: |
          IMAGE_REPO="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_BACKEND"
          IMAGE_TAG="${{ github.ref_type == 'tag' && github.ref_name || 'latest' }}"
          docker build -t "$IMAGE_REPO:latest" -t "$IMAGE_REPO:$IMAGE_TAG" ./backend
          docker push "$IMAGE_REPO:latest"
          docker push "$IMAGE_REPO:$IMAGE_TAG"

      # Passo 7: Terraform Setup (sem criar novos roles)
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init/Plan (minimal)
        working-directory: infra/terraform-min
        env:
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
        run: |
          terraform init -input=false
          terraform plan -input=false -out=tfplan

      # Passo 8: Aplicar Terraform (sem criar IAM roles)
      - name: Terraform Apply (minimal)
        if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && inputs.apply == 'true') || (github.event_name == 'push' && github.ref == 'refs/heads/main')
        working-directory: infra/terraform-min
        env:
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
        run: terraform apply -input=false -auto-approve tfplan

      # Passo 9: Ler outputs do Terraform e realizar deploy
      - name: Read Terraform outputs (minimal)
        id: tfout
        working-directory: infra/terraform-min
        run: |
          echo "bucket=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "site=$(terraform output -raw s3_website_endpoint)" >> $GITHUB_OUTPUT

      # Passo 10: Deploy ECS service
      # (minimal) Sem ECS nesta stack

      # Passo 11: Setup Node (frontend build)
      - name: Setup Node (frontend build)
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: frontend/package.json

      # Passo 12: Build frontend
      - name: Build frontend
        working-directory: frontend
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm i; fi
          npm run build

      # Passo 13: Upload Frontend to S3
      - name: Upload Frontend to S3
        run: |
          aws s3 sync ./frontend/dist/ s3://${{ steps.tfout.outputs.bucket }} --delete

      - name: Deployment summary
        run: |
          echo "Frontend (S3 website): http://${{ steps.tfout.outputs.site }}" >> $GITHUB_STEP_SUMMARY
