name: CD

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

permissions:
  id-token: write   # necessário para OIDC
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Configurar credenciais AWS via OIDC (recomendado)
      # Pré-requisito: criar Role com trust policy para GitHub
      # - uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     role-to-assume: ${{ vars.AWS_OIDC_ROLE_ARN }}
      #     aws-region: ${{ vars.AWS_REGION }}

      # Login no ECR, build e push da imagem do backend
      # - name: Login ECR
      #   uses: aws-actions/amazon-ecr-login@v2
      # - name: Build & Push Backend
      #   run: |
      #     docker build -t ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPO_BACKEND }}:latest ./backend
      #     docker push ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPO_BACKEND }}:latest

      # Terraform plan/apply (infra/terraform)
      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v3
      # - name: Terraform Init/Plan
      #   working-directory: infra/terraform
      #   run: |
      #     terraform init -input=false
      #     terraform plan -input=false -out=tfplan
      # - name: Terraform Apply (manual/condicional)
      #   if: startsWith(github.ref, 'refs/tags/v')
      #   working-directory: infra/terraform
      #   run: terraform apply -input=false -auto-approve tfplan

      # Deploy ECS e Upload do frontend para S3 ficariam aqui.

